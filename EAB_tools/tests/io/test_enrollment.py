"""Test enrollment functions."""

from pathlib import Path
import shutil

import pandas as pd
import pytest

from EAB_tools import (
    load_all_enrollment_reports,
    load_enrollments_report,
)
from EAB_tools.io.enrollment import enrollments_report_date


def test_enrollments_report_fixture(enrollments_report: pd.DataFrame) -> None:
    """
    Verify the integrity and basic structure of the enrollments report fixture.

    Ensure that:
    - The fixture returns a `pandas` DataFrame.
    - The DataFrame contains expected columns.
    - The DataFrame is not trivially small.

    Parameters
    ----------
    enrollments_report : pd.DataFrame
        The enrollments report DataFrame generated by the fixture.
    """
    assert isinstance(enrollments_report, pd.DataFrame)

    assert "Student ID" in enrollments_report.columns

    assert len(enrollments_report) > 5


def test_enrollments_report_unique_ids(enrollments_report: pd.DataFrame) -> None:
    # Every name is assigned to one unique ID
    """
    Ensure each student ID corresponds to a unique student name.

    Validates that each student ID is linked to exactly one student name, and that IDs
    can appear multiple times across the records.

    Parameters
    ----------
    enrollments_report : pd.DataFrame
        The enrollments report DataFrame to test.
    """
    assert (
        enrollments_report.groupby("Student ID")["Student Name"].nunique() == 1
    ).all()

    # Some ID numbers show up more than once
    assert (enrollments_report["Student ID"].value_counts() > 1).any()


def test_enrollments_report_emails(enrollments_report: pd.DataFrame) -> None:
    """
    Test email to student name mapping and normalization.

    Confirm each student email maps to one student name and that each email is unique,
    with or without periods.

    Parameters
    ----------
    enrollments_report : pd.DataFrame
        The enrollments report DataFrame to test.
    """
    assert (
        enrollments_report.groupby("Student E-mail")["Student Name"].nunique() == 1
    ).all()

    emails_without_dots = enrollments_report["Student E-mail"].str.replace(".", "")
    assert (
        enrollments_report.groupby(emails_without_dots)["Student ID"].nunique() == 1
    ).all()


def test_different_enrollments_report(
    different_enrollments_report: Path, enrollments_report: pd.DataFrame
) -> None:
    """
    Compare a specified report against another to confirm data uniqueness.

    Verify that student IDs in different reports are unique and that report dates match
    expected values.

    Parameters
    ----------
    different_enrollments_report : Path
        File path to the different enrollments report.
    enrollments_report : pd.DataFrame
        A DataFrame to compare against the different report.
    """
    different_report = load_enrollments_report(different_enrollments_report)
    n = len(different_report)
    enrollments_report_head = enrollments_report[:n]

    assert (
        different_report["Student ID"] != enrollments_report_head["Student ID"]
    ).all()

    assert (
        different_report["Report Date"] == pd.to_datetime("03/10/2024 20:30:00")
    ).all()


def test_enrollments_report_date(
    different_enrollments_report: Path,
    enrollments_report_path: Path,
) -> None:
    """
    Validate date extraction from enrollment reports.

    Ensure date extraction from different reports is consistent.

    Parameters
    ----------
    different_enrollments_report : Path
        Path to a different enrollments report for date extraction.
    enrollments_report_path : Path
        File path to the enrollments report for date extraction.
    """
    different_date = pd.to_datetime("03/10/2024 20:30:00")
    assert enrollments_report_date(different_enrollments_report) == different_date

    enrollments_df = load_enrollments_report(enrollments_report_path)
    assert (
        enrollments_report_date(enrollments_report_path)
        == enrollments_df["Report Date"]
    ).all()


@pytest.mark.parametrize("ignore_index", [True, False])
class TestLoadAllEnrollmentReports:
    """
    Evaluate the loading of enrollment reports under various configurations.

    Tests the load function with different settings for indexing and caching, assessing
    performance and correctness in handling potentially large data sets.

    Methods
    -------
    test_load_all_enrollment_reports(data_dir, ignore_index, tmp_path):
        Loads all reports, verifying correct data handling with optional indexing.
    test_load_all_enrollments_quicker(data_dir, tmp_path, ignore_index):
        Tests quicker data loads by limiting to smaller files, ensuring efficiency.
    """

    @pytest.mark.slow
    def test_load_all_enrollment_reports(
        self, data_dir: Path, ignore_index: bool, tmp_path: Path
    ) -> None:
        """
        Test the loading of all reports from a directory with caching options.

        Verifies all reports are correctly loaded, noting the effects of ignoring the
        DataFrame index.

        Parameters
        ----------
        data_dir : Path
            The directory containing the enrollment reports.
        ignore_index : bool
            Flag to ignore the DataFrame index during loading.
        tmp_path : Path
            The cache directory to use if required.


        See Also
        --------
        test_load_all_enrollments_quicker :
                The same test, but limits to files <50 MB.
        """
        load_all_enrollment_reports(
            data_dir, ignore_index=ignore_index, cache_dir=tmp_path
        )

    def test_load_all_enrollments_quicker(
        self, data_dir: Path, tmp_path: Path, ignore_index: bool
    ) -> None:
        """
        Test faster loading by processing only smaller files.

        Aims to improve efficiency by restricting the test to files smaller than 50MB,
        assessing the functionality of the loading process under constrained conditions.

        Parameters
        ----------
        data_dir : Path
            The directory containing potentially smaller enrollment reports.
        tmp_path : Path
            Temporary storage to speed up test execution.
        ignore_index : bool
            Specifies whether to ignore the DataFrame index during loading.

        See Also
        --------
        test_load_all_enrollment_reports
        """
        for file in data_dir.glob("*.csv"):
            if file.stat().st_size < 50 * 1024 * 1024:  # 50 MB
                shutil.copy2(file, tmp_path)

        load_all_enrollment_reports(
            tmp_path, ignore_index=ignore_index, cache_dir=tmp_path
        )
